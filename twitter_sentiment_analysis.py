# -*- coding: utf-8 -*-
"""Twitter_Sentiment_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Lb8uP8BFw-nkm2fxko1aQt8BUzQF-3C
"""

!pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# API to fetch the dataset from Kaggle
!kaggle datasets download -d kazanova/sentiment140

# Extracting the compressed dataset
from zipfile import ZipFile
dataset = '/content/sentiment140.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

"""Importing the Dependencies"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

# Printing the stopwords in English
print(stopwords.words('english'))

"""Data Processing

"""

# Loading the Data from CSV file to pandas dataframe
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv', encoding='ISO-8859-1')

twitter_data.shape

#Printing the first five rows of the dataframe
twitter_data.head()

# Naming the Columns and reading the dataset again
column_names= ['target','id','date','flag','user','text']
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv',names=column_names, encoding='ISO-8859-1')

twitter_data.shape

twitter_data.head()

# Counting the Number of Missing Values in the dataset
twitter_data.isnull().sum()

# checking the distribution of target column
twitter_data['target'].value_counts()

"""Convert the Target "4" to "1"
"""

twitter_data.replace({'target' : {4:1}}, inplace=True)

# checking the distribution of target column
twitter_data['target'].value_counts()

"""0 ----> Negative Tweet
1 ----> Postive Tweet

Stemming

Stemming is the process of reducing a word to its root word
"""

port_stem = PorterStemmer()

def stemming (content):
  stemmed_content = re.sub('[^a-zA-z] ',' ', content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()

  #Stemming Operation
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]

  stemmed_content = ' '.join(stemmed_content)

  return stemmed_content

"""50 Minutes Runtime for performing the stemming Operation on 1.6 million tweets"""

twitter_data['stemmed_content'] = twitter_data['text'].apply(stemming)

twitter_data.head()

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

# Seperating the data and label
X = twitter_data['stemmed_content'].values
Y = twitter_data['target'].values

print(X)

print(Y)

"""Splitting the Data into training data and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)

print(X_test)

# Converting the textual data to numerical data
vectorizer = TfidfVectorizer()
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

print(X_test)

"""Training the Logistic Regression Model"""

model = LogisticRegression(max_iter=1000)

model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# Accuracy Score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score on the training data', training_data_accuracy)

# Accuracy Score on test data
X_test_prediction = model.predict(X_test)
testing_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy score on the test data', testing_data_accuracy)

"""Saving the Trained Model"""

import pickle

file= 'trained_model.sav'
pickle.dump(model, open(file,'wb')) #wb means writing the file in binary

"""Using the Saved Model for Future Predictions"""

#loading the saved model
loaded_model=pickle.load(open('trained_model.sav','rb')) #rb means reading the file in binary

X_new = X_test[200]
print(Y_test[200])
prediction = model.predict(X_new)
print(prediction)

if(prediction[0]==0):
  print('The Tweet is Negative')
else:
  print('The Tweet is Positive')

X_new = X_test[3]
print(Y_test[3])
prediction = model.predict(X_new)
print(prediction)

if(prediction[0]==0):
  print('The Tweet is Negative')
else:
  print('The Tweet is Positive')

